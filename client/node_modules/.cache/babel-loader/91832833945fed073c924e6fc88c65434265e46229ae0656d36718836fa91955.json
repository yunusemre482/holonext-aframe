{"ast":null,"code":"require('./lib/OrbitControls');\nvar bind = AFRAME.utils.bind;\nAFRAME.registerComponent('orbit-controls', {\n  dependencies: ['camera'],\n  schema: {\n    autoRotate: {\n      type: 'boolean'\n    },\n    autoRotateSpeed: {\n      default: 2\n    },\n    dampingFactor: {\n      default: 0.1\n    },\n    enabled: {\n      default: true\n    },\n    enableDamping: {\n      default: true\n    },\n    enableKeys: {\n      default: true\n    },\n    enablePan: {\n      default: true\n    },\n    enableRotate: {\n      default: true\n    },\n    enableZoom: {\n      default: true\n    },\n    initialPosition: {\n      type: 'vec3'\n    },\n    keyPanSpeed: {\n      default: 7\n    },\n    minAzimuthAngle: {\n      type: 'number',\n      default: -Infinity\n    },\n    maxAzimuthAngle: {\n      type: 'number',\n      default: Infinity\n    },\n    maxDistance: {\n      default: 1000\n    },\n    maxPolarAngle: {\n      default: AFRAME.utils.device.isMobile() ? 90 : 120\n    },\n    minDistance: {\n      default: 1\n    },\n    minPolarAngle: {\n      default: 0\n    },\n    minZoom: {\n      default: 0\n    },\n    panSpeed: {\n      default: 1\n    },\n    rotateSpeed: {\n      default: 0.05\n    },\n    screenSpacePanning: {\n      default: false\n    },\n    target: {\n      type: 'vec3'\n    },\n    zoomSpeed: {\n      default: 0.5\n    }\n  },\n  init: function init() {\n    var el = this.el;\n    var oldPosition;\n    oldPosition = new THREE.Vector3();\n    this.bindMethods();\n    el.sceneEl.addEventListener('enter-vr', this.onEnterVR);\n    el.sceneEl.addEventListener('exit-vr', this.onExitVR);\n    document.body.style.cursor = 'grab';\n    document.addEventListener('mousedown', function () {\n      document.body.style.cursor = 'grabbing';\n    });\n    document.addEventListener('mouseup', function () {\n      document.body.style.cursor = 'grab';\n    });\n    this.target = new THREE.Vector3();\n    el.getObject3D('camera').position.copy(this.data.initialPosition);\n  },\n  pause: function pause() {\n    this.controls.dispose();\n  },\n  play: function play() {\n    var el = this.el;\n    this.controls = new THREE.OrbitControls(el.getObject3D('camera'), el.sceneEl.renderer.domElement);\n    this.update();\n  },\n  onEnterVR: function onEnterVR() {\n    var el = this.el;\n    if (!AFRAME.utils.device.checkHeadsetConnected() && !AFRAME.utils.device.isMobile()) {\n      return;\n    }\n    this.controls.enabled = false;\n    if (el.hasAttribute('look-controls')) {\n      el.setAttribute('look-controls', 'enabled', true);\n      oldPosition.copy(el.getObject3D('camera').position);\n      el.getObject3D('camera').position.set(0, 0, 0);\n    }\n  },\n  onExitVR: function onExitVR() {\n    var el = this.el;\n    if (!AFRAME.utils.device.checkHeadsetConnected() && !AFRAME.utils.device.isMobile()) {\n      return;\n    }\n    this.controls.enabled = true;\n    el.getObject3D('camera').position.copy(oldPosition);\n    if (el.hasAttribute('look-controls')) {\n      el.setAttribute('look-controls', 'enabled', false);\n    }\n  },\n  bindMethods: function bindMethods() {\n    this.onEnterVR = bind(this.onEnterVR, this);\n    this.onExitVR = bind(this.onExitVR, this);\n  },\n  update: function update(oldData) {\n    var controls = this.controls;\n    var data = this.data;\n    if (!controls) {\n      return;\n    }\n    controls.target = this.target.copy(data.target);\n    controls.autoRotate = data.autoRotate;\n    controls.autoRotateSpeed = data.autoRotateSpeed;\n    controls.dampingFactor = data.dampingFactor;\n    controls.enabled = data.enabled;\n    controls.enableDamping = data.enableDamping;\n    controls.enableKeys = data.enableKeys;\n    controls.enablePan = data.enablePan;\n    controls.enableRotate = data.enableRotate;\n    controls.enableZoom = data.enableZoom;\n    controls.keyPanSpeed = data.keyPanSpeed;\n    controls.maxPolarAngle = THREE.Math.degToRad(data.maxPolarAngle);\n    controls.maxAzimuthAngle = THREE.Math.degToRad(data.maxAzimuthAngle);\n    controls.maxDistance = data.maxDistance;\n    controls.minDistance = data.minDistance;\n    controls.minPolarAngle = THREE.Math.degToRad(data.minPolarAngle);\n    controls.minAzimuthAngle = THREE.Math.degToRad(data.minAzimuthAngle);\n    controls.minZoom = data.minZoom;\n    controls.panSpeed = data.panSpeed;\n    controls.rotateSpeed = data.rotateSpeed;\n    controls.screenSpacePanning = data.screenSpacePanning;\n    controls.zoomSpeed = data.zoomSpeed;\n  },\n  tick: function tick() {\n    var controls = this.controls;\n    var data = this.data;\n    if (!data.enabled) {\n      return;\n    }\n    if (controls.enabled && (controls.enableDamping || controls.autoRotate)) {\n      this.controls.update();\n    }\n  },\n  remove: function remove() {\n    this.controls.reset();\n    this.controls.dispose();\n    this.el.sceneEl.removeEventListener('enter-vr', this.onEnterVR);\n    this.el.sceneEl.removeEventListener('exit-vr', this.onExitVR);\n  }\n});","map":{"version":3,"names":["require","bind","AFRAME","utils","registerComponent","dependencies","schema","autoRotate","type","autoRotateSpeed","default","dampingFactor","enabled","enableDamping","enableKeys","enablePan","enableRotate","enableZoom","initialPosition","keyPanSpeed","minAzimuthAngle","Infinity","maxAzimuthAngle","maxDistance","maxPolarAngle","device","isMobile","minDistance","minPolarAngle","minZoom","panSpeed","rotateSpeed","screenSpacePanning","target","zoomSpeed","init","el","oldPosition","THREE","Vector3","bindMethods","sceneEl","addEventListener","onEnterVR","onExitVR","document","body","style","cursor","getObject3D","position","copy","data","pause","controls","dispose","play","OrbitControls","renderer","domElement","update","checkHeadsetConnected","hasAttribute","setAttribute","set","oldData","Math","degToRad","tick","remove","reset","removeEventListener"],"sources":["/Users/yunusemre/Desktop/Holonext/holonext-aframe/client/node_modules/aframe-orbit-controls/index.js"],"sourcesContent":["require('./lib/OrbitControls');\n\nvar bind = AFRAME.utils.bind;\n\nAFRAME.registerComponent('orbit-controls', {\n  dependencies: ['camera'],\n\n  schema: {\n    autoRotate: {type: 'boolean'},\n    autoRotateSpeed: {default: 2},\n    dampingFactor: {default: 0.1},\n    enabled: {default: true},\n    enableDamping: {default: true},\n    enableKeys: {default: true},\n    enablePan: {default: true},\n    enableRotate: {default: true},\n    enableZoom: {default: true},\n    initialPosition: {type: 'vec3'},\n    keyPanSpeed: {default: 7},\n    minAzimuthAngle: {type: 'number', default: - Infinity},\n    maxAzimuthAngle: {type: 'number', default: Infinity},\n    maxDistance: {default: 1000},\n    maxPolarAngle: {default: AFRAME.utils.device.isMobile() ? 90 : 120},\n    minDistance: {default: 1},\n    minPolarAngle: {default: 0},\n    minZoom: {default: 0},\n    panSpeed: {default: 1},\n    rotateSpeed: {default: 0.05},\n    screenSpacePanning: {default: false},\n    target: {type: 'vec3'},\n    zoomSpeed: {default: 0.5}\n  },\n\n  init: function () {\n    var el = this.el;\n    var oldPosition;\n\n    oldPosition = new THREE.Vector3();\n\n    this.bindMethods();\n    el.sceneEl.addEventListener('enter-vr', this.onEnterVR);\n    el.sceneEl.addEventListener('exit-vr', this.onExitVR);\n\n    document.body.style.cursor = 'grab';\n    document.addEventListener('mousedown', () => {\n      document.body.style.cursor = 'grabbing';\n    });\n    document.addEventListener('mouseup', () => {\n      document.body.style.cursor = 'grab';\n    });\n\n    this.target = new THREE.Vector3();\n    el.getObject3D('camera').position.copy(this.data.initialPosition);\n  },\n\n  pause: function () {\n    this.controls.dispose();\n  },\n\n  play: function () {\n    const el = this.el;\n    this.controls = new THREE.OrbitControls(el.getObject3D('camera'), el.sceneEl.renderer.domElement);\n    this.update();\n  },\n\n  onEnterVR: function() {\n    var el = this.el;\n\n    if (!AFRAME.utils.device.checkHeadsetConnected() &&\n        !AFRAME.utils.device.isMobile()) { return; }\n    this.controls.enabled = false;\n    if (el.hasAttribute('look-controls')) {\n      el.setAttribute('look-controls', 'enabled', true);\n      oldPosition.copy(el.getObject3D('camera').position);\n      el.getObject3D('camera').position.set(0, 0, 0);\n    }\n  },\n\n  onExitVR: function() {\n    var el = this.el;\n\n    if (!AFRAME.utils.device.checkHeadsetConnected() &&\n        !AFRAME.utils.device.isMobile()) { return; }\n    this.controls.enabled = true;\n    el.getObject3D('camera').position.copy(oldPosition);\n    if (el.hasAttribute('look-controls')) {\n      el.setAttribute('look-controls', 'enabled', false);\n    }\n  },\n\n  bindMethods: function() {\n    this.onEnterVR = bind(this.onEnterVR, this);\n    this.onExitVR = bind(this.onExitVR, this);\n  },\n\n  update: function (oldData) {\n    var controls = this.controls;\n    var data = this.data;\n\n    if (!controls) { return; }\n\n    controls.target = this.target.copy(data.target);\n    controls.autoRotate = data.autoRotate;\n    controls.autoRotateSpeed = data.autoRotateSpeed;\n    controls.dampingFactor = data.dampingFactor;\n    controls.enabled = data.enabled;\n    controls.enableDamping = data.enableDamping;\n    controls.enableKeys = data.enableKeys;\n    controls.enablePan = data.enablePan;\n    controls.enableRotate = data.enableRotate;\n    controls.enableZoom = data.enableZoom;\n    controls.keyPanSpeed = data.keyPanSpeed;\n    controls.maxPolarAngle = THREE.Math.degToRad(data.maxPolarAngle);\n    controls.maxAzimuthAngle = THREE.Math.degToRad(data.maxAzimuthAngle);\n    controls.maxDistance = data.maxDistance;\n    controls.minDistance = data.minDistance;\n    controls.minPolarAngle = THREE.Math.degToRad(data.minPolarAngle);\n    controls.minAzimuthAngle = THREE.Math.degToRad(data.minAzimuthAngle);\n    controls.minZoom = data.minZoom;\n    controls.panSpeed = data.panSpeed;\n    controls.rotateSpeed = data.rotateSpeed;\n    controls.screenSpacePanning = data.screenSpacePanning;\n    controls.zoomSpeed = data.zoomSpeed;\n  },\n\n  tick: function () {\n    var controls = this.controls;\n    var data = this.data;\n    if (!data.enabled) { return; }\n    if (controls.enabled && (controls.enableDamping || controls.autoRotate)) {\n      this.controls.update();\n    }\n  },\n\n  remove: function() {\n    this.controls.reset();\n    this.controls.dispose();\n\n    this.el.sceneEl.removeEventListener('enter-vr', this.onEnterVR);\n    this.el.sceneEl.removeEventListener('exit-vr', this.onExitVR);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}